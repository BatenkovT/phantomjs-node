{"name":"Phantomjs-node","tagline":"PhantomJS integration module for NodeJS","body":"phantom - Fast NodeJS API for PhantomJS\r\n========\r\n[![NPM](https://nodei.co/npm/phantom.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/phantom/)\r\n\r\n[![NPM Version][npm-image]][npm-url]\r\n[![NPM Downloads][downloads-image]][downloads-url]\r\n[![Linux Build][travis-image]][travis-url]\r\n[![Dependencies][david-image]][david-url]\r\n\r\n\r\n## Super easy to use\r\n```js\r\nvar phantom = require('phantom');\r\n\r\nphantom.create().then(function(ph) {\r\n  ph.createPage().then(function(page) {\r\n    page.open('https://stackoverflow.com/').then(function(status) {\r\n      console.log(status);\r\n      page.property('content').then(function(content) {\r\n        console.log(content);\r\n        page.close();\r\n        ph.exit();\r\n      });\r\n    });\r\n  });\r\n});\r\n```\r\n\r\n## Installation\r\n\r\n```bash\r\n$ npm install phantom --save\r\n```\r\n\r\n## How does it work?\r\n\r\n  [v1.0.x](//github.com/amir20/phantomjs-node/tree/v1) used to use `dnode` to communicate between nodejs and phantomjs. This approach raised a lot of security restrictions and did not work well when using `cluster` or `pm2`.\r\n\r\n  v2.0.x has been completely rewritten to use `sysin` and `sysout` pipes to communicate with the phantomjs process. It works out of the box with `cluster` and `pm2`. If you want to see the messages that are sent try adding `DEBUG=true` to your execution, ie. `DEBUG=true node path/to/test.js`. The new code is much cleaner and simpler. PhantomJS is started with `shim.js` which proxies all messages to the `page` or `phantom` object.\r\n\r\n## Migrating from 1.0.x\r\n\r\n  Version 2.0.x is not backward compatible with previous versions. Most notability, method calls do not take a callback function anymore. Since `node` supports `Promise`, each of the methods return a promise. Instead of writing `page.open(url, function(){})` you would have to write `page.open(url).then(function(){})`.\r\n\r\n  The API is much more consistent now. All properties can be read with `page.property(key)` and settings can be read with `page.setting(key)`. See below for more example.\r\n\r\n## `phantom` object API\r\n\r\nTo create a new instance of `phantom` use `phantom.create()` to return a `Promise` which should resolve to a `phantom` object. If you want add parameters to the phantomjs process you can do so by doing:\r\n\r\n```js\r\nvar phantom = require('phantom');\r\nphnatom.create(['--ignore-ssl-errors=yes', ' --load-images=no']).then(...)\r\n```\r\nTo create a new `page`, you have to call `createPage()`:\r\n\r\n```js\r\nvar phantom = require('phantom');\r\nphantom.create().then(function(ph) {\r\n    ph.createPage().then(function(page) {\r\n        // use page\r\n        ph.exit();\r\n    });\r\n});\r\n```\r\n\r\nMake sure to call `#exit()` on the phantom instance to kill the phantomjs process. Otherwise, the process will never exit.\r\n\r\n## `page` object API\r\n\r\n  The `page` object that is returned with `createPage` is a proxy that sends all methods to `phantom`. Most method calls should be identical to PhantomJS API. You must remember that each method returns a `Promise`.\r\n\r\n  Page properties can be read using the `#property(key)` method.\r\n\r\n  ```js\r\npage.property('plainText').then(function(content) {\r\n  console.log(content);\r\n});\r\n  ```\r\n\r\n  Page properties can be set using the `#property(key, value)` method.\r\n\r\n  ```js\r\npage.property('viewportSize', {width: 800, height: 600}).then(function() {  \r\n});\r\n  ```\r\nWhen setting values, using `then()` is optional. But beware that the next method to phantom will block until it is ready to accept a new message.\r\n\r\n`page.settings` can be accessed via `page.setting(key)` or set via `page.setting(key, value)`. Here is an example to read `javascriptEnabled` property.\r\n\r\n```js\r\npage.setting('javascriptEnabled').then(function(value){\r\n    expect(value).toEqual(true);\r\n});\r\n```\r\n\r\nYou can set events using `property` because they are property members of `page`.\r\n\r\n```js\r\npage.property('onResourceRequested', function(requestData, networkRequest) {\r\n    console.log(requestData.url);\r\n})\r\n```\r\n\r\n\r\n## Tests\r\n\r\n  To run the test suite, first install the dependencies, then run `npm test`:\r\n\r\n```bash\r\n$ npm install\r\n$ npm test\r\n```\r\n\r\n## Contributing\r\n\r\n  This package is under development. Pull requests are welcomed. Please make sure tests are added for new functionalities and that your build does pass in TravisCI.\r\n\r\n## People\r\n\r\n  The current lead maintainer is [Amir Raminfar](https://github.com/amir20)\r\n\r\n  [List of all contributors](https://github.com/amir20/phantomjs-node/graphs/contributors)\r\n\r\n## License\r\n\r\n  [ISC](LICENSE)\r\n\r\n[npm-image]: https://img.shields.io/npm/v/phantom.svg?style=flat-square\r\n[npm-url]: https://npmjs.org/package/phantom\r\n[downloads-image]: https://img.shields.io/npm/dm/phantom.svg?style=flat-square\r\n[downloads-url]: https://npmjs.org/package/phantom\r\n[travis-image]: https://img.shields.io/travis/amir20/phantomjs-node.svg?style=flat-square\r\n[travis-url]: https://travis-ci.org/amir20/phantomjs-node\r\n[david-image]: https://david-dm.org/amir20/phantomjs-node.svg?style=flat-square\r\n[david-url]: https://david-dm.org/amir20/phantomjs-node\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}